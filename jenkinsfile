pipeline {
    agent any
stages{
stage('scm') {
      steps{
			git credentialsId: 'jenkins',url: 'ssh://jenkinsstage@3.92.168.203:29418/Sapience/OEEDataCollection'
			}
			}
stage('maven') {
      steps{
        dir('oeeDataCollection'){
            def descriptor = Artifactory.mavenDescriptor()
            descriptor.version = cfipVersion
            descriptor.pomFile = 'pom.xml'
            descriptor.transform()
            
            artifactoryServer = Artifactory.server 'cimetrixArtifactory'
            mavenBuild = Artifactory.newMavenBuild()
            mavenBuild.deployer server: artifactoryServer, releaseRepo: 'factoryInsight-OEEDataCollection', snapshotRepo: 'factoryInsight-OEEDataCollection'
            mavenBuild.deployer.deployArtifacts = false
            mavenBuild.tool = 'maven-3.3.9'
            
            buildInfo = mavenBuild.run pom: 'pom.xml', goals: '-s C:\\Users\\Administrator\\Desktop\\settings.xml clean org.jacoco:jacoco-maven-plugin:prepare-agent install'       
			}
		}
	}
	stage('sonar') {
	    steps{
        def scannerHome = tool 'scanner';
        withSonarQubeEnv('sonar') {
            dir('oeeDataCollection') {
                bat """
                    set SONAR_SCANNER_OPTS="-Xmx1024m"
                    "${scannerHome}/bin/sonar-scanner"
                """
				}
			}
		  }
		}
		stage("quality-gate"){
		     steps{
           waitUntil {
            def analysisComplete = false
            def status = getAnalysisStatus()
            switch (status) {
                case "SUCCESS":
                    analysisComplete = true
                    echo "Quality Gate analysis completed"
                    break;
                case "CANCELLED":
                case "FAILURE":
                    analysisComplete = true
                    error("Quality Gate analysis did not completed ok, analysis status is: " + status)
                    break;
                case "PENDING":
                case "IN_PROGRESS":
                    echo "Quality Gate analysis is still pending..."
                    break;
                default:
                    error("Analysis status not recognized: " + status)
                    break;
                }
            analysisComplete
              }
        def result = getAnalysisResult()
        switch (result) {
            case "ERROR":
                error("Quality Gate not reached, breaking CI build")
                break;
            case "OK":
                echo "Quality Gate has been reached"
                break;
            default:
                error("Analysis result not recognized: " + result)
                break;
			}
		}
stage('artifactory') {
      steps{
        mavenBuild.deployer.deployArtifacts buildInfo
        artifactoryServer.publishBuildInfo buildInfo
		}
	}
	//stage('deploy') {
	         steps{
        //dir('oeeDataCollection/oeeDataCollectionWeb'){
        //    def mavenDeploy
         //   def deployInfo
    
         //   mavenDeploy = Artifactory.newMavenBuild()
         //   mavenDeploy.tool = 'maven-3.3.9'
            
         //   deployInfo = mavenDeploy.run pom: 'pom.xml', goals: '-s C:\\WRKSPC\\workspace\\CSP_OEE_Data_Collection\\maven\\dev-settings.xml wildfly:deploy-only'       
		//	}
		//}
	}

   }
}
	
}	
		
